- Task L1.1 : In the base class `TrafficObject`, set up a thread barrier in its destructor that ensures
that all the thread objects in the member vector` _threads` are joined.

- Task L1.2 : In the `Vehicle` class, start a thread with the member function `drive` and the
object `this` as the launch parameters. Also, add the created thread into the `_thread` vector of
the parent class.

- Task L1.3 : Vary the number of simulated vehicles in `main` and use the top function on the terminal
or the task manager of your system to observe the number of threads used by the simulation.


- Task L2.1 : In method Vehicle::drive(), start up a task using std::async which takes a reference to the
method Intersection::addVehicleToQueue, the object _currDestination and a shared pointer to this using the
get_shared_this() function. Then, wait for the data to be available before proceeding to slow down.

- Task L2.2 : In method Intersection::addVehicleToQueue(), add the new vehicle to the waiting line by
creating a promise, a corresponding future and then adding both to _waitingVehicles. Then wait until
the vehicle has been granted entry.

- Task L2.3 : In method WaitingVehicles::permitEntryToFirstInQueue(), get the entries from the
front of _promises and _vehicles. Then, fulfill promise and send signal back that permission to enter
has been granted. Finally, remove the front elements from both queues.